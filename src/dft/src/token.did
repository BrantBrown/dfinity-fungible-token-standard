type ApproveResult = variant { Ok; Err : Error };
type BurnResult = variant { Ok; Err : Error };
type CallData = record { method : text; args : vec nat8 };
type Error = variant {
  CallFailed;
  NotifyFailed;
  RejectedByHolder;
  InsufficientAllowance;
  InvalidSpender;
  InvalidSubaccount;
  InsufficientBalance;
  InvalidTokenHolder;
  InvalidReceiver;
  QuantityTooSmall;
  Unknown;
  RejectedByReceiver;
};
type Fee = variant {
  Rate : nat8;
  Fixed : nat;
  RateWithLowestLimit : record { nat; nat8 };
};
type KeyValuePair = record { k : text; v : text };
type MetaData = record {
  fee : Fee;
  decimals : nat8;
  name : text;
  total_supply : nat;
  symbol : text;
};
type TransferResult = variant {
  Ok : record { nat; opt vec Error };
  Err : Error;
};
service : {
  allowance : (text, text) -> (nat) query;
  approve : (opt vec nat8, text, nat, opt CallData) -> (ApproveResult);
  balanceOf : (text) -> (nat) query;
  burn : (opt text, nat) -> (BurnResult);
  extend : () -> (vec KeyValuePair) query;
  logo : () -> (opt vec nat8) query;
  meta : () -> (MetaData) query;
  supportedInterface : (text) -> (bool) query;
  transfer : (opt vec nat8, text, nat, opt CallData) -> (TransferResult);
  transferFrom : (opt vec nat8, text, text, nat) -> (TransferResult);
  updateExtend : (vec KeyValuePair) -> (bool);
  updateLogo : (vec nat8) -> (bool);
}