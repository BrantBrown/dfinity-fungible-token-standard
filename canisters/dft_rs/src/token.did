type ApproveResult = variant { Ok : opt text; Err : text };
type BurnResult = variant { Ok; Err : text };
type CallData = record { method : text; args : vec nat8 };
type Fee = record { rate : nat; lowest : nat };
type KeyValuePair = record { k : text; v : text };
type MetaData = record {
  fee : Fee;
  decimals : nat8;
  name : text;
  total_supply : nat;
  symbol : text;
};
type TransferResponse = record { txid : nat; error : opt vec text };
type TransferResult = variant { Ok : TransferResponse; Err : text };

service : (text, text, nat8, nat) -> {
  allowance : (text, text) -> (nat) query;
  approve : (opt vec nat8, text, nat, opt CallData) -> (ApproveResult);
  balanceOf : (text) -> (nat) query;
  burn : (opt vec nat8, nat) -> (BurnResult);
  decimals : () -> (nat8) query;
  extend : () -> (vec KeyValuePair) query;
  fee : () -> (Fee) query;
  logo : () -> (vec nat8) query;
  meta : () -> (MetaData) query;
  name : () -> (text) query;
  symbol : () -> (text) query;
  totalSupply : () -> (nat) query;
  tokenGraphql : () -> (opt principal) query;
  transfer : (opt vec nat8, text, nat, opt CallData) -> (TransferResult);
  transferFrom : (opt vec nat8, text, text, nat) -> (TransferResult);
  supportedInterface : (text) -> (bool) query;
  cyclesBalance : () -> (nat) query;
}